name: AI Commit Analysis

on: [push]

jobs:
  analyze-and-modify:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install OpenAI SDK
        run: pip install openai

      - name: Analyze and Update Commit
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          author_name=$(git log -1 --pretty=format:"%an")
          author_email=$(git log -1 --pretty=format:"%ae")
          old_message=$(git log -1 --pretty=%B)
          diff_output=$(git diff HEAD^)

          cat > analyze.py << 'EOL'
          from openai import OpenAI
          import os
          import json

          client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
          diff = os.getenv('DIFF_OUTPUT')
          old_msg = os.getenv('OLD_MESSAGE')

          response = client.chat.completions.create(
              model="gpt-4-turbo-preview",
              messages=[
                  {
                      "role": "system",
                      "content": "Analyze the git diff and create a commit message. Return JSON with 'summary' (50 chars max) and 'description' fields."
                  },
                  {
                      "role": "user",
                      "content": f"Original commit: {old_msg}\n\nDiff:\n{diff}\n\nRespond only with JSON: {{\"summary\": \"brief summary\", \"description\": \"detailed explanation\"}}"
                  }
              ],
              max_tokens=1000
          )
          
          print(response.choices[0].message.content)
          EOL

          DIFF_OUTPUT="$diff_output" OLD_MESSAGE="$old_message" python analyze.py > commit_data.json

          # Extract and create commit message
          summary=$(python -c "import json; data=json.load(open('commit_data.json')); print(data['summary'])")
          description=$(python -c "import json; data=json.load(open('commit_data.json')); print(data['description'])")
          
          modified_name="$author_name (auto)"
          git config user.name "$modified_name"
          git config user.email "$author_email"

          printf "%s\n\n%s" "$summary" "$description" | git commit --amend --cleanup=strip --file=-
          git push --force
